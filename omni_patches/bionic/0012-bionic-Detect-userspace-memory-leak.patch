From 1bbfd8f0f97870f2e618a41883deb047e04935bd Mon Sep 17 00:00:00 2001
From: Biswajit Paul <biswajitpaul@codeaurora.org>
Date: Mon, 29 Jul 2013 16:48:31 +0530
Subject: [PATCH 12/14] bionic: Detect userspace memory leak

When process is consuming memory beyond the limit specified by
property, it will print all the allocations of the same process.
To enable this feature, do following steps:
1. libc.debug.malloc 40
2. libc.debug.malloc.program <PROCESS_NAME>
3. libc.debug.malloc.maxprocsize <VALUE_IN_BYTES>
4. libc.malloc.minalloclim <VALUE_IN_BYTES>

Change-Id: I03a4de9643ec954802b26443ce5685975ea30f89
---
 libc/bionic/malloc_debug_check.cpp  |  155 +++++++++++++++++++++++++++++++++--
 libc/bionic/malloc_debug_common.cpp |   22 +++++
 2 files changed, 171 insertions(+), 6 deletions(-)

diff --git a/libc/bionic/malloc_debug_check.cpp b/libc/bionic/malloc_debug_check.cpp
index 11a6ec1..9790d84 100644
--- a/libc/bionic/malloc_debug_check.cpp
+++ b/libc/bionic/malloc_debug_check.cpp
@@ -47,6 +47,8 @@
 
 #include "debug_mapinfo.h"
 #include "debug_stacktrace.h"
+#include <signal.h>
+
 #include "dlmalloc.h"
 #include "libc_logging.h"
 #include "malloc_debug_common.h"
@@ -55,6 +57,14 @@
 /* libc.debug.malloc.backlog */
 extern unsigned int gMallocDebugBacklog;
 extern int gMallocDebugLevel;
+extern unsigned int malloc_sig_enabled;
+
+extern unsigned int min_allocation_report_limit;
+extern unsigned int max_allocation_limit;
+extern char* process_name;
+static size_t total_count = 0;
+static bool isDumped = false;
+static bool sigHandled = false;
 
 #define MAX_BACKTRACE_DEPTH 16
 #define ALLOCATION_TAG      0x1ee7d00d
@@ -64,6 +74,10 @@ extern int gMallocDebugLevel;
 #define FRONT_GUARD_LEN     (1<<5)
 #define REAR_GUARD          0xbb
 #define REAR_GUARD_LEN      (1<<5)
+#define FRONT_GUARD_SS      0xab
+
+static void malloc_sigaction(int signum, siginfo_t * sg, void * cxt);
+static struct sigaction default_sa;
 
 static void log_message(const char* format, ...) {
   va_list args;
@@ -123,9 +137,14 @@ static inline void init_front_guard(hdr_t* hdr) {
     memset(hdr->front_guard, FRONT_GUARD, FRONT_GUARD_LEN);
 }
 
+static inline void set_snapshot(hdr_t* hdr) {
+    memset(hdr->front_guard, FRONT_GUARD_SS, FRONT_GUARD_LEN);
+}
+
 static inline bool is_front_guard_valid(hdr_t* hdr) {
     for (size_t i = 0; i < FRONT_GUARD_LEN; i++) {
-        if (hdr->front_guard[i] != FRONT_GUARD) {
+        if (!((hdr->front_guard[i] == FRONT_GUARD) ||
+                    (hdr->front_guard[i] == FRONT_GUARD_SS))) {
             return 0;
         }
     }
@@ -159,6 +178,9 @@ static inline bool is_rear_guard_valid(hdr_t* hdr) {
 }
 
 static inline void add_locked(hdr_t* hdr, hdr_t** tail, hdr_t** head) {
+    if (hdr->tag == ALLOCATION_TAG) {
+        total_count += hdr->size;
+    }
     hdr->prev = NULL;
     hdr->next = *head;
     if (*head)
@@ -169,6 +191,9 @@ static inline void add_locked(hdr_t* hdr, hdr_t** tail, hdr_t** head) {
 }
 
 static inline int del_locked(hdr_t* hdr, hdr_t** tail, hdr_t** head) {
+    if (hdr->tag == ALLOCATION_TAG) {
+        total_count -= hdr->size;
+    }
     if (hdr->prev) {
         hdr->prev->next = hdr->next;
     } else {
@@ -182,6 +207,25 @@ static inline int del_locked(hdr_t* hdr, hdr_t** tail, hdr_t** head) {
     return 0;
 }
 
+static void snapshot_report_leaked_nodes() {
+    log_message("%s: %s\n", __FILE__, __FUNCTION__);
+    hdr_t * iterator = head;
+    size_t total_size = 0;
+    do {
+        if (iterator->front_guard[0] == FRONT_GUARD &&
+                iterator->size >= min_allocation_report_limit) {
+            log_message("obj %p, size %d", iterator, iterator->size);
+            total_size += iterator->size;
+            log_backtrace(iterator->bt, iterator->bt_depth);
+            log_message("------------------------------"); // as an end marker
+            // Marking the node as we do not want to print it again.
+            set_snapshot(iterator);
+        }
+        iterator = iterator->next;
+    } while (iterator);
+    log_message("Total Pending allocations after last snapshot: %d", total_size);
+}
+
 static inline void add(hdr_t* hdr, size_t size) {
     ScopedPthreadMutexLocker locker(&lock);
     hdr->tag = ALLOCATION_TAG;
@@ -190,6 +234,21 @@ static inline void add(hdr_t* hdr, size_t size) {
     init_rear_guard(hdr);
     ++gAllocatedBlockCount;
     add_locked(hdr, &tail, &head);
+    if (total_count >= max_allocation_limit && !isDumped && malloc_sig_enabled) {
+        isDumped = true;
+        log_message("Maximum limit of the %s process (%d Bytes) size has reached."\
+                "Maximum limit is set to:%d Bytes\n", process_name,
+                total_count, max_allocation_limit);
+        log_message("Start dumping allocations of the process %s", process_name);
+        log_message("+++ *** +++ *** +++ *** +++ *** +++ *** +++ *** +++ *** +++ ***\n");
+
+        // Print allocations of the process
+        snapshot_report_leaked_nodes();
+
+        log_message("*** +++ *** +++ *** +++ *** +++ *** +++ *** +++ *** +++ *** +++\n");
+        log_message("Completed dumping allocations of the process %s", process_name);
+
+    }
 }
 
 static inline int del(hdr_t* hdr) {
@@ -220,7 +279,8 @@ static int was_used_after_free(hdr_t* hdr) {
 static inline int check_guards(hdr_t* hdr, int* safe) {
     *safe = 1;
     if (!is_front_guard_valid(hdr)) {
-        if (hdr->front_guard[0] == FRONT_GUARD) {
+        if ((hdr->front_guard[0] == FRONT_GUARD) ||
+                ((hdr->front_guard[0] == FRONT_GUARD_SS))) {
             log_message("+++ ALLOCATION %p SIZE %d HAS A CORRUPTED FRONT GUARD\n",
                        user(hdr), hdr->size);
         } else {
@@ -544,12 +604,95 @@ static void ReportMemoryLeaks() {
   }
 }
 
+#define DEBUG_SIGNAL SIGWINCH
+
+/* Initializes malloc debugging framework.
+ * See comments on MallocDebugInit in malloc_debug_common.h
+ */
 extern "C" int malloc_debug_initialize() {
-  backtrace_startup();
-  return 0;
+    if (malloc_sig_enabled) {
+        struct sigaction sa; //local or static?
+        //struct sigaction sa_snapshot; //local or static?
+        sa.sa_handler = NULL;
+        sa.sa_sigaction = malloc_sigaction;
+        sigemptyset(&sa.sa_mask);
+        sigaddset(&sa.sa_mask, DEBUG_SIGNAL);
+        sa.sa_flags = SA_SIGINFO;
+        sa.sa_restorer = NULL;
+        if (sigaction(DEBUG_SIGNAL, &sa, &default_sa) < 0) {
+           log_message("Failed to register signal handler w/ errno %s", strerror(errno));
+           malloc_sig_enabled = 0;
+        } else {
+           log_message("Registered signal handler");
+            sigHandled = false;
+        }
+    } else {
+        backtrace_startup();
+    }
+    return 0;
 }
 
 extern "C" void malloc_debug_finalize() {
-  ReportMemoryLeaks();
-  backtrace_shutdown();
+    if (malloc_sig_enabled) {
+        log_message("Deregister %d signal handler", DEBUG_SIGNAL);
+        sigaction(DEBUG_SIGNAL, &default_sa, NULL);
+        malloc_sig_enabled = 0;
+        sigHandled = false;
+    } else {
+        ReportMemoryLeaks();
+        backtrace_shutdown();
+    }
+}
+
+static void snapshot_nodes_locked() {
+    log_message("%s: %s\n", __FILE__, __FUNCTION__);
+    hdr_t * iterator = head;
+    do {
+        if (iterator->front_guard[0] == FRONT_GUARD) {
+            set_snapshot(iterator);
+        }
+        iterator = iterator->next;
+    } while (iterator);
+}
+
+static void malloc_sigaction(int signum, siginfo_t * sg, void * cxt)
+{
+    log_message("%s: %s\n", __FILE__, __FUNCTION__);
+
+    log_message("%s got signal\n", __func__,signum);
+
+    if (signum != DEBUG_SIGNAL) {
+        log_message("RECEIVED %d instead of %d\n", signum, DEBUG_SIGNAL);
+        return;
+    }
+
+    ScopedPthreadMutexLocker locker(&lock);
+
+    log_message("Process under observation:%s", process_name);
+    log_message("Maximum process size limit:%d Bytes", max_allocation_limit);
+    log_message("Won't print allocation below %d Bytes", min_allocation_report_limit);
+    log_message("Total count: %d\n", total_count);
+
+    if (!head) {
+        log_message("No allocations?");
+        return;
+    }
+    // If sigHandled is false, meaning it's being handled first time
+    if (!sigHandled) {
+        sigHandled = true;
+        // Marking the nodes assuming that they should not be leaked nodes.
+        snapshot_nodes_locked();
+    }
+    else {
+        // We need to print new allocations now
+        log_message("Start dumping allocations of the process %s", process_name);
+        log_message("+++ *** +++ *** +++ *** +++ *** +++ *** +++ *** +++ *** +++ ***\n");
+
+        // Print allocations of the process
+        snapshot_report_leaked_nodes();
+
+        log_message("*** +++ *** +++ *** +++ *** +++ *** +++ *** +++ *** +++ *** +++\n");
+        log_message("Completed dumping allocations of the process %s", process_name);
+    }
+    return;
 }
diff --git a/libc/bionic/malloc_debug_common.cpp b/libc/bionic/malloc_debug_common.cpp
index ccceb14..cbd1e47 100644
--- a/libc/bionic/malloc_debug_common.cpp
+++ b/libc/bionic/malloc_debug_common.cpp
@@ -291,6 +291,10 @@ unsigned int gMallocDebugBacklog;
 
 /* The value of libc.debug.malloc. */
 int gMallocDebugLevel;
+unsigned int malloc_sig_enabled = 0;
+unsigned int max_allocation_limit;
+unsigned int min_allocation_report_limit;
+const char* process_name;
 
 template<typename FunctionType>
 void InitMallocFunction(void* malloc_impl_handler, FunctionType* func, const char* prefix, const char* suffix) {
@@ -397,6 +401,22 @@ static void malloc_init_impl() {
             }
             so_name = "/system/lib/libc_malloc_debug_qemu.so";
             break;
+        case 40:
+            malloc_sig_enabled = 1;
+            char debug_proc_size[PROP_VALUE_MAX];
+            if (__system_property_get("libc.debug.malloc.maxprocsize", debug_proc_size))
+                max_allocation_limit = atoi(debug_proc_size);
+            else
+                max_allocation_limit = 30 * 1024 * 1024; // In Bytes [Default is 30 MB]
+            if (__system_property_get("libc.debug.malloc.minalloclim", debug_proc_size))
+                min_allocation_report_limit = atoi(debug_proc_size);
+            else
+                min_allocation_report_limit = 10 * 1024; // In Bytes [Default is 10 KB]
+            process_name = __progname;
+
+            so_name = "/system/lib/libc_malloc_debug_leak.so";
+            break;
+
         default:
             error_log("%s: Debug level %d is unknown\n", __progname, gMallocDebugLevel);
             return;
@@ -458,6 +478,8 @@ static void malloc_init_impl() {
         case 20:
             InitMalloc(malloc_impl_handle, &gMallocUse, "qemu_instrumented");
             break;
+        case 40:
+            InitMalloc(malloc_impl_handle, &gMallocUse, "chk");
         default:
             break;
     }
-- 
1.7.9.5

