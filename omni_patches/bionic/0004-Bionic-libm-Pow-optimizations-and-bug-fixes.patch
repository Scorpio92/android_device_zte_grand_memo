From 2b2579cb2ad1cb15e1af21d1989ae9def025aeee Mon Sep 17 00:00:00 2001
From: Lucas Crowthers <lucasc@codeaurora.org>
Date: Mon, 27 Aug 2012 14:35:57 -0400
Subject: [PATCH 04/14] Bionic/libm: Pow optimizations and bug fixes.

Use VFP calling convention for pow_neon handoff function by default.
Fix register usage collision between two different polynomial
coefficients in pow_neon.  Remove conditional execution in pow_neon
and replace with branching.

Change-Id: I76095f4a006e2fb01a53943b66fd69bfa1fd3033
(cherry picked from commit 5f0ee8c38363ecb99f7ceb487583b5e7152e63ce)
(cherry picked from commit f4a020fad7881195bff087b5803e4a7b528b81f1)
(cherry picked from commit 22157646da56cba346893ea17a1de5e4fd689b53)
---
 libm/arm/e_pow.S                           |   55 +++++++++++++++++-----------
 libm/upstream-freebsd/lib/msun/src/e_pow.c |   47 ++++++++++++++++++------
 2 files changed, 69 insertions(+), 33 deletions(-)

diff --git a/libm/arm/e_pow.S b/libm/arm/e_pow.S
index a75c30f..0e922db 100644
--- a/libm/arm/e_pow.S
+++ b/libm/arm/e_pow.S
@@ -44,8 +44,6 @@
 #define k2                  d26
 #define k3                  d25
 #define k4                  d24
-#define k5                  d23
-#define k6                  d22
 @ Values which cross the boundaries between polynomial implementations:
 #define ss                  d16
 #define ss2                 d17
@@ -63,7 +61,6 @@
 #define x                   d0
 #define bp                  d4
 #define y                   d1
-#define ln2                 d5
 @ log series:
 #define u                   d19
 #define v                   d20
@@ -84,13 +81,17 @@
 #define ylg2x_temp          d17
 #define yn_temp             d18
 #define yn_round_offset     d19
+#define ln2                 d5
 @ Careful, overwriting HIGH_WORD_MASK, reset it if you need it again ...
 #define rounded_exponent    d31
 @ exp series:
+#define k5                  d23
+#define k6                  d22
 #define k7                  d21
 #define k8                  d20
 #define ss3                 d19
-#define k0                  d20
+@ overwrite double_1 (we're done with it by now)
+#define k0                  d28
 #define twoto1o4            d6
 
 @instructions that gas doesn't like to encode correctly:
@@ -99,7 +100,10 @@
 #define vmovne_f64          fconstdne
 
 ENTRY(pow_neon)
+#if defined(KRAIT_NO_AAPCS_VFP_MODE)
+     @ ARM ABI has inputs coming in via r registers, lets move to a d register
     vmov            x, x_lw, x_hw
+#endif
     push            {r4, r5, r6, r7, r8, r9, r10, lr}
 
     @ pre-staged bp values
@@ -130,7 +134,10 @@ ENTRY(pow_neon)
     @ double_1 = (double) 1.0
     vmov_f64        double_1, #0x70
 
+#if defined(KRAIT_NO_AAPCS_VFP_MODE)
+     @ move y from r registers to a d register
     vmov            y, y_lw, y_hw
+#endif
 
     cmp             xmantissa, twoto1o5
 
@@ -139,16 +146,16 @@ ENTRY(pow_neon)
 
     adr             literals, .LliteralTable
 
-    movw            iEXP_MASK, #0xfff0
-    movt            iEXP_MASK, #0x0000
-
-    bic             ix, x_hw, iEXP_MASK
+    bhi             .Lxgt2to1over5
+    @ zero out lg2 constant term if don't offset our input
+    vsub.f64        lg2const, lg2const, lg2const
+    b               .Lxle2to1over5
 
+.Lxgt2to1over5:
     @ if normalized x > 2^(1/5), bp = 1 + (2^(2/5)-1) = 2^(2/5)
-    vaddhi.f64      bp, bp, bpa
-    @ zero out lg2 constant term if don't offset our input
-    vsubls.f64      lg2const, lg2const, lg2const
+    vadd.f64        bp, bp, bpa
 
+.Lxle2to1over5:
     @ will need ln2 for various things
     vldr            ln2, .Lln2
 
@@ -161,9 +168,12 @@ ENTRY(pow_neon)
     @ N = (floor(log2(x)) + 0x3ff) * 2^52
     vand.i64        int_n, x, EXPONENT_MASK
 
+    bls             .Lxle2to3over5
     @ if normalized x > 2^(3/5), bp = 2^(2/5) + (2^(4/5) - 2^(2/5) = 2^(4/5)
-    vaddhi.f64      bp, bp, bpb
-    vaddhi.f64      lg2const, lg2const, lg2const
+    vadd.f64      bp, bp, bpb
+    vadd.f64      lg2const, lg2const, lg2const
+
+.Lxle2to3over5:
 
     @ load log2 polynomial series constants
     vldm            literals!, {k4, k3, k2, k1}
@@ -236,14 +246,18 @@ ENTRY(pow_neon)
     @ Load 2^(1/4) for later computations
     vldr            twoto1o4, .Ltwoto1o4
 
+    @ either add or subtract one based on the sign of double_n and ylg2x
+    vshr.s64        ylg2x_round_offset, ylg2x, #62
+    vshr.s64        yn_round_offset, double_n, #62
+
     @ move unmodified y*lg2x into temp space
     vmov            ylg2x_temp, ylg2x
+    @ compute floor(8 y * n + 1)/8
+    @ and floor(8 y (log2(x)) + 1)/8
+    vcvt.s32.f64    ylg2x, ylg2x, #3
     @ move unmodified y*n into temp space
     vmov            yn_temp, double_n
-
-    @ either add or subtract one based on the sign of double_n and ylg2x
-    vshr.s64        ylg2x_round_offset, ylg2x, #62
-    vshr.s64        yn_round_offset, double_n, #62
+    vcvt.s32.f64    double_n, double_n, #3
 
     @ load exp polynomial series constants
     vldm            literals!, {k8, k7, k6, k5, k4, k3, k2, k1}
@@ -255,11 +269,6 @@ ENTRY(pow_neon)
     vorr.u64        ylg2x_round_offset, ylg2x_round_offset, int_1
     vorr.u64        yn_round_offset, yn_round_offset, int_1
 
-    @ compute floor(8 y * n + 1)/8
-    @ and floor(8 y (log2(x)) + 1)/8
-    vcvt.s32.f64    ylg2x, ylg2x, #3
-
-    vcvt.s32.f64    double_n, double_n, #3
     @ round up to the nearest 1/8th
     vadd.s32        ylg2x, ylg2x, ylg2x_round_offset
     vadd.s32        double_n, double_n, yn_round_offset
@@ -375,8 +384,10 @@ ENTRY(pow_neon)
     vmul.f64        Result, expadjustment, Result
 
 .LleavePow:
+#if defined(KRAIT_NO_AAPCS_VFP_MODE)
     @ return Result (FP)
     vmov            Return_lw, Return_hw, Result
+#endif
 .LleavePowDirect:
     @ leave directly returning whatever is in Return_lw and Return_hw
     pop             {r4, r5, r6, r7, r8, r9, r10, pc}
diff --git a/libm/upstream-freebsd/lib/msun/src/e_pow.c b/libm/upstream-freebsd/lib/msun/src/e_pow.c
index f6353ec..10a0cf0 100644
--- a/libm/upstream-freebsd/lib/msun/src/e_pow.c
+++ b/libm/upstream-freebsd/lib/msun/src/e_pow.c
@@ -12,10 +12,6 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD$");
 
-#if defined(KRAIT_NEON_OPTIMIZATION)
-double pow_neon(double x, double y);
-#endif
-
 /* __ieee754_pow(x,y) return x**y
  *
  *		      n
@@ -64,6 +60,14 @@ double pow_neon(double x, double y);
 #include "math.h"
 #include "math_private.h"
 
+#if defined(KRAIT_NEON_OPTIMIZATION) || defined(SPARROW_NEON_OPTIMIZATION)
+#if defined(KRAIT_NO_AAPCS_VFP_MODE)
+double pow_neon(double x, double y);
+#else
+double pow_neon(double x, double y, int32_t lx, int32_t hx) __attribute__((pcs("aapcs-vfp")));
+#endif
+#endif
+
 static const double
 bp[] = {1.0, 1.5,},
 dp_h[] = { 0.0, 5.84962487220764160156e-01,}, /* 0x3FE2B803, 0x40000000 */
@@ -111,15 +115,32 @@ __ieee754_pow(double x, double y)
 	ix = hx&0x7fffffff;  iy = hy&0x7fffffff;
 
     /* y==zero: x**0 = 1 */
-	if((iy|ly)==0) return one; 	
 
-    /* x==1: 1**y = 1, even if y is NaN */
-	if (hx==0x3ff00000 && lx == 0) return one;
+    if (ly == 0) {
+        if (hy == ly) {
+            /* y==0.0, x**0 = 1 */
+            return one;
+        }
+        else if (iy > 0x7ff00000) {
+            /* y is NaN, return x+y (NaN) */
+            return x+y;
+        }
+    }
+    else if (iy >= 0x7ff00000) {
+        /* y is NaN, return x+y (NaN) */
+        return x+y;
+    }
 
-    /* y!=zero: result is NaN if either arg is NaN */
-	if(ix > 0x7ff00000 || ((ix==0x7ff00000)&&(lx!=0)) ||
-	   iy > 0x7ff00000 || ((iy==0x7ff00000)&&(ly!=0))) 
-		return (x+0.0)+(y+0.0);
+    if (lx == 0) {
+        if (ix > 0x7ff00000) {
+            /* x is NaN, return x+y (NaN) */
+            return x+y;
+        }
+    }
+    else if (ix >= 0x7ff00000) {
+        /* x is NaN, return x+y (NaN) */
+        return x+y;
+    }
 
     /* determine if y is an odd int when x < 0
      * yisint = 0	... y is not an integer
@@ -209,7 +230,11 @@ __ieee754_pow(double x, double y)
 	    t2 = v-(t1-u);
 #if defined(KRAIT_NEON_OPTIMIZATION)
 	} else if (ix <= 0x40100000 && iy <= 0x40100000 && hy > 0 && hx > 0) {
+#if defined(KRAIT_NO_AAPCS_VFP_MODE)
 		return pow_neon(x,y);
+#else
+		return pow_neon(x,y,lx,hx);
+#endif
 #endif
 	} else {
 	    double ss,s2,s_h,s_l,t_h,t_l;
-- 
1.7.9.5

